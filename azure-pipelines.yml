trigger:
  - main

pool:
  name: local

variables:
  buildConfiguration: 'Release'

stages:
  - stage: InstallAndBuild
    displayName: Build Frontend and Backend
    jobs:
      - job: BuildFrontend
        displayName: 'Build Frontend'
        pool:
          name: local
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Use Node.js 20.x'

          - script: |
              echo "=== Current directory and structure ==="
              cd
              dir
              
              echo "=== Entering frontend directory ==="
              cd frontend
              dir
              
              echo "=== Writing .env ==="
              echo VITE_APP_NAME="WI Invoice" > .env
              echo VITE_APP_TITLE="" >> .env
              echo VITE_APP_ENV= >> .env
              echo VITE_APP_DEBUG=true >> .env
              echo VITE_APP_LOG_LEVEL=debug >> .env
              echo VITE_BASE_URL=http://localhost:3001/api >> .env
              
              echo "=== Showing .env ==="
              type .env
              
              echo "=== Checking Node and NPM ==="
              node -v
              npm -v
              
              echo "=== Running npm install ==="
              npm install
              if %errorlevel% neq 0 exit /b %errorlevel%
              
              echo "=== Setting environment and running build ==="
              set NODE_ENV=production
              npm run build
              if %errorlevel% neq 0 (
                echo "❌ Vite build failed"
                exit /b %errorlevel%
              )
              
              echo "=== Checking dist folder ==="
              if exist dist (
                echo "✅ dist folder found"
                dir dist
              ) else (
                echo "❌ dist folder not found"
                dir
                exit /b 1
              )
            displayName: 'Build Frontend (Windows)'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'frontend/dist'
              artifactName: 'frontend-build'
              publishLocation: 'Container'

      - job: BuildBackend
        displayName: 'Build Backend'
        pool:
          name: local
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Use Node.js'

          - script: |
              cd backend
              npm install
            displayName: 'Install Backend'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'backend'
              artifactName: 'backend-src'
              publishLocation: 'Container'

  - stage: SonarQubeAnalysis
    displayName: 'Run SonarQube Code Analysis'
    jobs:
      - job: SonarQubeScan
        displayName: 'SonarQube Scanner'
        pool:
          name: local
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Use Node.js'

          - script: |
              echo Running Sonar Scanner...
              sonar-scanner ^
                -Dsonar.projectKey=wi-invoice ^
                -Dsonar.sources=frontend,backend ^
                -Dsonar.host.url=http://localhost:9000 ^
                -Dsonar.login=$(SONAR_TOKEN)
            displayName: 'Run SonarQube CLI Scanner'

  - stage: Test
    displayName: 'Run Tests'
    jobs:
      - job: FrontendTests
        displayName: 'Frontend Tests'
        pool:
          name: local
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Use Node.js'

          - script: |
              cd frontend
              npm install
              npm test -- --coverage
            displayName: 'Run Frontend Tests with Coverage'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'frontend/junit.xml'
              mergeTestResults: true
              testRunTitle: 'Frontend Tests'
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'frontend/coverage/cobertura-coverage.xml'
              reportDirectory: 'frontend/coverage'
            displayName: 'Publish Code Coverage'
            condition: succeededOrFailed()

      - job: BackendTests
        displayName: 'Backend Tests'
        pool:
          name: local
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Use Node.js'

          - script: |
              cd backend
              npm install
              npm test -- --coverage
            displayName: 'Run Backend Tests with Coverage'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'backend/junit.xml'
              mergeTestResults: true
              testRunTitle: 'Backend Tests'
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'backend/coverage/cobertura-coverage.xml'
              reportDirectory: 'backend/coverage'
            displayName: 'Publish Code Coverage'
            condition: succeededOrFailed()

  - stage: Deliver
    displayName: 'Deliver Artifact'
    jobs:
      - job: DeliverJob
        displayName: 'Deliver Job'
        pool:
          name: local
        steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              artifactName: 'frontend-build'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Frontend Artifact'

          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              artifactName: 'backend-src'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Backend Artifact'

          - script: |
              echo "Creating release package..."
              mkdir -p $(Build.ArtifactStagingDirectory)/release
              cp -r $(System.ArtifactsDirectory)/frontend-build/* $(Build.ArtifactStagingDirectory)/release/public
              cp -r $(System.ArtifactsDirectory)/backend-src/* $(Build.ArtifactStagingDirectory)/release/
              echo "Release package created successfully"
            displayName: 'Package Release Artifacts'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/release'
              artifactName: 'wi-invoice-release'
              publishLocation: 'Container'
            displayName: 'Publish Release Package'

  - stage: DeployDev
    displayName: 'Deploy to Dev Environment'
    dependsOn: Deliver
    jobs:
      - job: DevDeployJob
        displayName: 'Dev Deploy'
        pool:
          name: local
        steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              artifactName: 'wi-invoice-release'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Release Package'

          - script: |
              echo "Deploying to Dev environment on port 3001..."
              mkdir -p $(System.DefaultWorkingDirectory)/deploy/dev
              cp -r $(System.ArtifactsDirectory)/wi-invoice-release/* $(System.DefaultWorkingDirectory)/deploy/dev/
              
              echo "Starting application on port 3001..."
              cd $(System.DefaultWorkingDirectory)/deploy/dev
              echo "PORT=3001" > .env
              echo "NODE_ENV=development" >> .env
              
              # Mock the actual deployment - in a real scenario you'd start the app
              echo "Application deployed to Dev environment at http://localhost:3001"
            displayName: 'Deploy to Dev Environment'

  - stage: DeployQA
    displayName: 'Deploy to QA Environment'
    dependsOn: DeployDev
    jobs:
      - job: QADeployJob
        displayName: 'QA Deploy'
        pool:
          name: local
        steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              artifactName: 'wi-invoice-release'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Release Package'

          - script: |
              echo "Deploying to QA environment on port 3002..."
              mkdir -p $(System.DefaultWorkingDirectory)/deploy/qa
              cp -r $(System.ArtifactsDirectory)/wi-invoice-release/* $(System.DefaultWorkingDirectory)/deploy/qa/
              
              echo "Starting application on port 3002..."
              cd $(System.DefaultWorkingDirectory)/deploy/qa
              echo "PORT=3002" > .env
              echo "NODE_ENV=qa" >> .env
              
              # Mock the actual deployment
              echo "Application deployed to QA environment at http://localhost:3002"
            displayName: 'Deploy to QA Environment'

  - stage: DeployStaging
    displayName: 'Deploy to Staging Environment'
    dependsOn: DeployQA
    jobs:
      - job: StagingDeployJob
        displayName: 'Staging Deploy'
        pool:
          name: local
        steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              artifactName: 'wi-invoice-release'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Release Package'

          - script: |
              echo "Deploying to Staging environment on port 3003..."
              mkdir -p $(System.DefaultWorkingDirectory)/deploy/staging
              cp -r $(System.ArtifactsDirectory)/wi-invoice-release/* $(System.DefaultWorkingDirectory)/deploy/staging/
              
              echo "Starting application on port 3003..."
              cd $(System.DefaultWorkingDirectory)/deploy/staging
              echo "PORT=3003" > .env
              echo "NODE_ENV=staging" >> .env
              
              # Mock the actual deployment
              echo "Application deployed to Staging environment at http://localhost:3003"
            displayName: 'Deploy to Staging Environment'

  - stage: DeployProduction
    displayName: 'Deploy to Production Environment'
    dependsOn: DeployStaging
    jobs:
      - job: ProdDeployJob
        displayName: 'Production Deploy'
        pool:
          name: local
        steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              artifactName: 'wi-invoice-release'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Release Package'

          - script: |
              echo "Deploying to Production environment on port 3000..."
              mkdir -p $(System.DefaultWorkingDirectory)/deploy/prod
              cp -r $(System.ArtifactsDirectory)/wi-invoice-release/* $(System.DefaultWorkingDirectory)/deploy/prod/
              
              echo "Starting application on port 3000..."
              cd $(System.DefaultWorkingDirectory)/deploy/prod
              echo "PORT=3000" > .env
              echo "NODE_ENV=production" >> .env
              
              # Mock the actual deployment
              echo "Application deployed to Production environment at http://localhost:3000"
            displayName: 'Deploy to Production Environment'